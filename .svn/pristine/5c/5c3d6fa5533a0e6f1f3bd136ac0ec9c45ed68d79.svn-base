package sl.util;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.codec.binary.Base64;
import org.hibernate.annotations.common.util.impl.LoggerFactory;
import org.jboss.logging.Logger;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.JwtBuilder;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

public class TokenUtil {
    private static Logger       log      = LoggerFactory
        .logger(TokenUtil.class);

    private static final String profiles = "moyer";

    /**
     * 由字符串生成加密key
     * 
     * @return
     */
    private static SecretKey generalKey() {
        String stringKey = profiles;
        byte[] encodedKey = Base64.decodeBase64(stringKey);
        SecretKey key = new SecretKeySpec(encodedKey, 0, encodedKey.length,
                "AES");
        return key;
    }

    /**
     * 创建jwt
     * 
     * @param id
     * @param subject
     * @param ttlMillis
     * @return
     * @throws Exception
     */
    public static String createJWT(String id, String account, long ttlMillis)
            throws Exception {
        SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;
        long nowMillis = System.currentTimeMillis();
        Date now = new Date(nowMillis);
        SecretKey key = generalKey();

        // 自定义payload内容
        Map claims = new HashMap();
        claims.put("uid", "777");
        claims.put("account", "mm");

        JwtBuilder builder = Jwts.builder()
            .setClaims(claims)
            .setId(id)
            .setIssuedAt(now)
            .setSubject(account)
            .signWith(signatureAlgorithm, key);
        if (ttlMillis >= 0) {
            long expMillis = nowMillis + ttlMillis;
            Date exp = new Date(expMillis);
            builder.setExpiration(exp);
        }
        return builder.compact();
    }

    /**
     * 解析jwt
     * 
     * @param jwt
     * @return
     * @throws Exception
     */
    public static Claims parseJWT(String jwt) throws Exception {
        SecretKey key = generalKey();
        Claims claims = Jwts.parser()
            .setSigningKey(key)
            .parseClaimsJws(jwt)
            .getBody();

        return claims;
    }

    // public static void main(String[] args) {
    // try {
    // String token = TokenUtil.createJWT("233", "payload", 1000 * 60);
    // System.out.println(token);
    // Claims c = TokenUtil.parseJWT(token);
    // System.out.println(c.getSubject());
    // } catch (Exception e) {
    // e.printStackTrace();
    // log.error("this token is invalid");
    // }
    // }

}
